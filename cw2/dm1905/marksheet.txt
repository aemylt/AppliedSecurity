-------------------------------------------------------------------------------

1. Instructions

- replace any [...] with free text,
  and
- replace the [?] with an X if you have completed that stage,
- replace the [?] with an * if you have attempted that stage, but you know
  it doesn't work completely; document why you think it doesn't work, plus
  what you would do to fix the problem, at the end of the marksheet.

-------------------------------------------------------------------------------

2. Information

So that we can calibrate and improve the assignment in the future, give us
a rough idea how long (in hours) you spent on it *in total*:

effort : 50 hours

-------------------------------------------------------------------------------

3. Citation

Clearly it might have an influence on your mark, but the use of third-party
resources *is* allowed *if* correctly cited (unless explicitly prohibited 
by the assignment description of course).  Let us know what third-party 
source code or resources you used (if any) so it's clear what's your work 
and what isn't:

For the power attack, I have used the NumPy 1.4.1 library installed on the machines in the Linux Lab:
http://sourceforge.net/projects/numpy/files/NumPy/1.4.1/

Tables for S-box, Inverse S-box and Round Constant have been taken from Wikipedia:
https://en.wikipedia.org/wiki/Rijndael_S-box
https://en.wikipedia.org/wiki/Rijndael_key_schedule#Rcon

Hamming-Weight calculations have been taken from Workspace1 of 'Power Analysis Attacks - Revealing the Secrets of Smartcards':
http://www.dpabook.org/onlinematerial/matlabscripts/index.htm

-------------------------------------------------------------------------------

4. Marking

The following gives a stage-by-stage description of the assignment marking
scheme.  Note this acts as an indicative guideline only, including weights
for each more obvious element (e.g., the functional correctness of a stage).
For example, other elements outside this list *often* warrant an increase
or decrease in marks; examples include hard to quantify features such as
the style or efficiency of a solution.

[X] Stage 1 : an attack based on error messages

              - Successfully reversed RSADP    primitive             ( 50%)
              - Successfully reversed EME-OAEP primitive             ( 50%)

                Attack result : [172600005846B4186A65CFB1D8BB7B7C80D2C39C88399D06C9D901BBA0389A62AEEA3A75C40EF357C5FC]

[X] Stage 2 : an attack based on execution time

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [C7C13DFB6FE8F33B]

[X] Stage 3 : an attack based on an injected fault

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [7DE6F5A5F84C01CFC638E5DA64EDC37B]

[X] Stage 4 : an attack based on power consumption

              - Efficiency  of attack strategy                       ( 20%)
              - Robustness  of attack strategy                       ( 20%)
              - Correctness of attack strategy                       ( 60%)

                Attack result : [2E3D1FBEEFBDFA7619700B105845E8F6]

[X] Stage 5 : analysis                                               (100%)

                                                                     ------
                                                                     (500%)

-------------------------------------------------------------------------------

5. Documentation

Any other documentation, notes or comments that you think are important or
might be easy to overlook (e.g., a subtle issue or technique in associated
source code) should go here:

Both programs are written as Python scripts, and thus a Makefile is not required.

Stage 3's attack follows the paper by Manger et al up until the end of the first part of the attack. It uses two faults to produce two sets of hypotheses and computes the intersection of these sets to find the correct key. If more time was available then this would be the main area of improvement, as using two faults instead of one is not ideal in a real-world situation.

Stage 4 uses the first 2000 traces of 100 messages to perform the attack. This is based off of testing the number of traces and messages and looking for a good balance between performance and consistency in being able to recover the key.

-------------------------------------------------------------------------------
